<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.information.dao.ThreePhaseMapper">
  <resultMap id="BaseResultMap" type="com.information.pojo.ThreePhase">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="device_id" jdbcType="INTEGER" property="deviceId" />
    <result column="code" jdbcType="VARCHAR" property="code" />
    <result column="voltage_b" jdbcType="INTEGER" property="voltageB" />
    <result column="electric_current_b" jdbcType="INTEGER" property="electricCurrentB" />
    <result column="power_b" jdbcType="INTEGER" property="powerB" />
    <result column="reactive_power_b" jdbcType="INTEGER" property="reactivePowerB" />
    <result column="power_factor_b" jdbcType="INTEGER" property="powerFactorB" />
    <result column="apparent_power_b" jdbcType="INTEGER" property="apparentPowerB" />
    <result column="voltage_c" jdbcType="INTEGER" property="voltageC" />
    <result column="electric_current_c" jdbcType="INTEGER" property="electricCurrentC" />
    <result column="power_c" jdbcType="INTEGER" property="powerC" />
    <result column="reactive_power_c" jdbcType="INTEGER" property="reactivePowerC" />
    <result column="power_factor_c" jdbcType="INTEGER" property="powerFactorC" />
    <result column="apparent_power_c" jdbcType="INTEGER" property="apparentPowerC" />
    <result column="temperature_b" jdbcType="INTEGER" property="temperatureB" />
    <result column="temperature_c" jdbcType="INTEGER" property="temperatureC" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, device_id, code, voltage_b, electric_current_b, power_b, reactive_power_b, power_factor_b, 
    apparent_power_b, voltage_c, electric_current_c, power_c, reactive_power_c, power_factor_c, 
    apparent_power_c, temperature_b, temperature_c
  </sql>
  <select id="selectByExample" parameterType="com.information.pojo.ThreePhaseExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from threephase
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from threephase
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from threephase
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.information.pojo.ThreePhaseExample">
    delete from threephase
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.information.pojo.ThreePhase">
    insert into threephase (id, device_id, code, 
      voltage_b, electric_current_b, power_b, 
      reactive_power_b, power_factor_b, apparent_power_b, 
      voltage_c, electric_current_c, power_c, 
      reactive_power_c, power_factor_c, apparent_power_c, 
      temperature_b, temperature_c)
    values (#{id,jdbcType=INTEGER}, #{deviceId,jdbcType=INTEGER}, #{code,jdbcType=VARCHAR}, 
      #{voltageB,jdbcType=INTEGER}, #{electricCurrentB,jdbcType=INTEGER}, #{powerB,jdbcType=INTEGER}, 
      #{reactivePowerB,jdbcType=INTEGER}, #{powerFactorB,jdbcType=INTEGER}, #{apparentPowerB,jdbcType=INTEGER}, 
      #{voltageC,jdbcType=INTEGER}, #{electricCurrentC,jdbcType=INTEGER}, #{powerC,jdbcType=INTEGER}, 
      #{reactivePowerC,jdbcType=INTEGER}, #{powerFactorC,jdbcType=INTEGER}, #{apparentPowerC,jdbcType=INTEGER}, 
      #{temperatureB,jdbcType=INTEGER}, #{temperatureC,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.information.pojo.ThreePhase">
    insert into threephase
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="deviceId != null">
        device_id,
      </if>
      <if test="code != null">
        code,
      </if>
      <if test="voltageB != null">
        voltage_b,
      </if>
      <if test="electricCurrentB != null">
        electric_current_b,
      </if>
      <if test="powerB != null">
        power_b,
      </if>
      <if test="reactivePowerB != null">
        reactive_power_b,
      </if>
      <if test="powerFactorB != null">
        power_factor_b,
      </if>
      <if test="apparentPowerB != null">
        apparent_power_b,
      </if>
      <if test="voltageC != null">
        voltage_c,
      </if>
      <if test="electricCurrentC != null">
        electric_current_c,
      </if>
      <if test="powerC != null">
        power_c,
      </if>
      <if test="reactivePowerC != null">
        reactive_power_c,
      </if>
      <if test="powerFactorC != null">
        power_factor_c,
      </if>
      <if test="apparentPowerC != null">
        apparent_power_c,
      </if>
      <if test="temperatureB != null">
        temperature_b,
      </if>
      <if test="temperatureC != null">
        temperature_c,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="deviceId != null">
        #{deviceId,jdbcType=INTEGER},
      </if>
      <if test="code != null">
        #{code,jdbcType=VARCHAR},
      </if>
      <if test="voltageB != null">
        #{voltageB,jdbcType=INTEGER},
      </if>
      <if test="electricCurrentB != null">
        #{electricCurrentB,jdbcType=INTEGER},
      </if>
      <if test="powerB != null">
        #{powerB,jdbcType=INTEGER},
      </if>
      <if test="reactivePowerB != null">
        #{reactivePowerB,jdbcType=INTEGER},
      </if>
      <if test="powerFactorB != null">
        #{powerFactorB,jdbcType=INTEGER},
      </if>
      <if test="apparentPowerB != null">
        #{apparentPowerB,jdbcType=INTEGER},
      </if>
      <if test="voltageC != null">
        #{voltageC,jdbcType=INTEGER},
      </if>
      <if test="electricCurrentC != null">
        #{electricCurrentC,jdbcType=INTEGER},
      </if>
      <if test="powerC != null">
        #{powerC,jdbcType=INTEGER},
      </if>
      <if test="reactivePowerC != null">
        #{reactivePowerC,jdbcType=INTEGER},
      </if>
      <if test="powerFactorC != null">
        #{powerFactorC,jdbcType=INTEGER},
      </if>
      <if test="apparentPowerC != null">
        #{apparentPowerC,jdbcType=INTEGER},
      </if>
      <if test="temperatureB != null">
        #{temperatureB,jdbcType=INTEGER},
      </if>
      <if test="temperatureC != null">
        #{temperatureC,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.information.pojo.ThreePhaseExample" resultType="java.lang.Long">
    select count(*) from threephase
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update threephase
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.deviceId != null">
        device_id = #{record.deviceId,jdbcType=INTEGER},
      </if>
      <if test="record.code != null">
        code = #{record.code,jdbcType=VARCHAR},
      </if>
      <if test="record.voltageB != null">
        voltage_b = #{record.voltageB,jdbcType=INTEGER},
      </if>
      <if test="record.electricCurrentB != null">
        electric_current_b = #{record.electricCurrentB,jdbcType=INTEGER},
      </if>
      <if test="record.powerB != null">
        power_b = #{record.powerB,jdbcType=INTEGER},
      </if>
      <if test="record.reactivePowerB != null">
        reactive_power_b = #{record.reactivePowerB,jdbcType=INTEGER},
      </if>
      <if test="record.powerFactorB != null">
        power_factor_b = #{record.powerFactorB,jdbcType=INTEGER},
      </if>
      <if test="record.apparentPowerB != null">
        apparent_power_b = #{record.apparentPowerB,jdbcType=INTEGER},
      </if>
      <if test="record.voltageC != null">
        voltage_c = #{record.voltageC,jdbcType=INTEGER},
      </if>
      <if test="record.electricCurrentC != null">
        electric_current_c = #{record.electricCurrentC,jdbcType=INTEGER},
      </if>
      <if test="record.powerC != null">
        power_c = #{record.powerC,jdbcType=INTEGER},
      </if>
      <if test="record.reactivePowerC != null">
        reactive_power_c = #{record.reactivePowerC,jdbcType=INTEGER},
      </if>
      <if test="record.powerFactorC != null">
        power_factor_c = #{record.powerFactorC,jdbcType=INTEGER},
      </if>
      <if test="record.apparentPowerC != null">
        apparent_power_c = #{record.apparentPowerC,jdbcType=INTEGER},
      </if>
      <if test="record.temperatureB != null">
        temperature_b = #{record.temperatureB,jdbcType=INTEGER},
      </if>
      <if test="record.temperatureC != null">
        temperature_c = #{record.temperatureC,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update threephase
    set id = #{record.id,jdbcType=INTEGER},
      device_id = #{record.deviceId,jdbcType=INTEGER},
      code = #{record.code,jdbcType=VARCHAR},
      voltage_b = #{record.voltageB,jdbcType=INTEGER},
      electric_current_b = #{record.electricCurrentB,jdbcType=INTEGER},
      power_b = #{record.powerB,jdbcType=INTEGER},
      reactive_power_b = #{record.reactivePowerB,jdbcType=INTEGER},
      power_factor_b = #{record.powerFactorB,jdbcType=INTEGER},
      apparent_power_b = #{record.apparentPowerB,jdbcType=INTEGER},
      voltage_c = #{record.voltageC,jdbcType=INTEGER},
      electric_current_c = #{record.electricCurrentC,jdbcType=INTEGER},
      power_c = #{record.powerC,jdbcType=INTEGER},
      reactive_power_c = #{record.reactivePowerC,jdbcType=INTEGER},
      power_factor_c = #{record.powerFactorC,jdbcType=INTEGER},
      apparent_power_c = #{record.apparentPowerC,jdbcType=INTEGER},
      temperature_b = #{record.temperatureB,jdbcType=INTEGER},
      temperature_c = #{record.temperatureC,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.information.pojo.ThreePhase">
    update threephase
    <set>
      <if test="deviceId != null">
        device_id = #{deviceId,jdbcType=INTEGER},
      </if>
      <if test="code != null">
        code = #{code,jdbcType=VARCHAR},
      </if>
      <if test="voltageB != null">
        voltage_b = #{voltageB,jdbcType=INTEGER},
      </if>
      <if test="electricCurrentB != null">
        electric_current_b = #{electricCurrentB,jdbcType=INTEGER},
      </if>
      <if test="powerB != null">
        power_b = #{powerB,jdbcType=INTEGER},
      </if>
      <if test="reactivePowerB != null">
        reactive_power_b = #{reactivePowerB,jdbcType=INTEGER},
      </if>
      <if test="powerFactorB != null">
        power_factor_b = #{powerFactorB,jdbcType=INTEGER},
      </if>
      <if test="apparentPowerB != null">
        apparent_power_b = #{apparentPowerB,jdbcType=INTEGER},
      </if>
      <if test="voltageC != null">
        voltage_c = #{voltageC,jdbcType=INTEGER},
      </if>
      <if test="electricCurrentC != null">
        electric_current_c = #{electricCurrentC,jdbcType=INTEGER},
      </if>
      <if test="powerC != null">
        power_c = #{powerC,jdbcType=INTEGER},
      </if>
      <if test="reactivePowerC != null">
        reactive_power_c = #{reactivePowerC,jdbcType=INTEGER},
      </if>
      <if test="powerFactorC != null">
        power_factor_c = #{powerFactorC,jdbcType=INTEGER},
      </if>
      <if test="apparentPowerC != null">
        apparent_power_c = #{apparentPowerC,jdbcType=INTEGER},
      </if>
      <if test="temperatureB != null">
        temperature_b = #{temperatureB,jdbcType=INTEGER},
      </if>
      <if test="temperatureC != null">
        temperature_c = #{temperatureC,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.information.pojo.ThreePhase">
    update threephase
    set device_id = #{deviceId,jdbcType=INTEGER},
      code = #{code,jdbcType=VARCHAR},
      voltage_b = #{voltageB,jdbcType=INTEGER},
      electric_current_b = #{electricCurrentB,jdbcType=INTEGER},
      power_b = #{powerB,jdbcType=INTEGER},
      reactive_power_b = #{reactivePowerB,jdbcType=INTEGER},
      power_factor_b = #{powerFactorB,jdbcType=INTEGER},
      apparent_power_b = #{apparentPowerB,jdbcType=INTEGER},
      voltage_c = #{voltageC,jdbcType=INTEGER},
      electric_current_c = #{electricCurrentC,jdbcType=INTEGER},
      power_c = #{powerC,jdbcType=INTEGER},
      reactive_power_c = #{reactivePowerC,jdbcType=INTEGER},
      power_factor_c = #{powerFactorC,jdbcType=INTEGER},
      apparent_power_c = #{apparentPowerC,jdbcType=INTEGER},
      temperature_b = #{temperatureB,jdbcType=INTEGER},
      temperature_c = #{temperatureC,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByExampleWithRowbounds" parameterType="com.information.pojo.ThreePhaseExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from threephase
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>